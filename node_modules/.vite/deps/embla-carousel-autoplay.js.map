{
  "version": 3,
  "sources": ["../../embla-carousel-autoplay/src/components/Options.ts", "../../embla-carousel-autoplay/src/components/index.ts"],
  "sourcesContent": ["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  delay: number\n  jump: boolean\n  playOnInit: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n  rootNode: ((emblaRoot: HTMLElement) => HTMLElement | null) | null\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null,\n}\n\nexport type AutoplayOptionsType = Partial<OptionsType>\n", "import { AutoplayOptionsType, defaultOptions, OptionsType } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport EmblaCarousel, { EmblaCarouselType } from 'embla-carousel'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    autoplay?: AutoplayType\n  }\n}\n\nexport type AutoplayType = CreatePluginType<\n  {\n    play: (jump?: boolean) => void\n    stop: () => void\n    reset: () => void\n  },\n  OptionsType\n>\n\nfunction Autoplay(userOptions?: AutoplayOptionsType): AutoplayType {\n  const optionsHandler = EmblaCarousel.optionsHandler()\n  const optionsBase = optionsHandler.merge(\n    defaultOptions,\n    Autoplay.globalOptions,\n  )\n  let options: AutoplayType['options']\n  let carousel: EmblaCarouselType\n  let interaction: () => void\n  let timer = 0\n  let jump = false\n\n  function init(embla: EmblaCarouselType): void {\n    carousel = embla\n    options = optionsHandler.atMedia(self.options)\n    jump = options.jump\n    interaction = options.stopOnInteraction ? destroy : stop\n    const { eventStore } = carousel.internalEngine()\n    const emblaRoot = carousel.rootNode()\n    const root = (options.rootNode && options.rootNode(emblaRoot)) || emblaRoot\n\n    carousel.on('pointerDown', interaction)\n    if (!options.stopOnInteraction) carousel.on('pointerUp', reset)\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', interaction)\n      if (!options.stopOnInteraction) eventStore.add(root, 'mouseleave', reset)\n    }\n\n    eventStore.add(document, 'visibilitychange', () => {\n      if (document.visibilityState === 'hidden') return stop()\n      reset()\n    })\n    eventStore.add(window, 'pagehide', (event: PageTransitionEvent) => {\n      if (event.persisted) stop()\n    })\n\n    if (options.playOnInit) play()\n  }\n\n  function destroy(): void {\n    carousel.off('pointerDown', interaction)\n    if (!options.stopOnInteraction) carousel.off('pointerUp', reset)\n    stop()\n    timer = 0\n  }\n\n  function play(jumpOverride?: boolean): void {\n    stop()\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride\n    timer = window.setTimeout(next, options.delay)\n  }\n\n  function stop(): void {\n    if (!timer) return\n    window.clearTimeout(timer)\n  }\n\n  function reset(): void {\n    if (!timer) return\n    stop()\n    play()\n  }\n\n  function next(): void {\n    const { index } = carousel.internalEngine()\n    const kill = options.stopOnLastSnap && index.get() === index.max\n\n    if (kill) return destroy()\n\n    if (carousel.canScrollNext()) {\n      carousel.scrollNext(jump)\n    } else {\n      carousel.scrollTo(0, jump)\n    }\n    play()\n  }\n\n  const self: AutoplayType = {\n    name: 'autoplay',\n    options: optionsHandler.merge(optionsBase, userOptions),\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n  }\n  return self\n}\n\nAutoplay.globalOptions = <AutoplayOptionsType | undefined>undefined\n\nexport default Autoplay\n"],
  "mappings": ";;;;;;AAYO,IAAMA,iBAA8B;EACzCC,QAAQ;EACRC,aAAa,CAAA;EACbC,OAAO;EACPC,MAAM;EACNC,YAAY;EACZC,mBAAmB;EACnBC,kBAAkB;EAClBC,gBAAgB;EAChBC,UAAU;AAT+B;ACO3C,SAASC,SAASC,aAAiC;AACjD,MAAMC,iBAAiBC,cAAcD,eAAd;AACvB,MAAME,cAAcF,eAAeG,MACjCf,gBACAU,SAASM,aAFS;AAIpB,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC,QAAQ;AACZ,MAAIhB,OAAO;AAEX,WAASiB,KAAKC,OAAwB;AACpCJ,eAAWI;AACXL,cAAUL,eAAeW,QAAQC,KAAKP,OAA5B;AACVb,WAAOa,QAAQb;AACfe,kBAAcF,QAAQX,oBAAoBmB,UAAUC;AAC5C,QAAAC,aAAeT,SAASU,eAAT,EAAA;AACvB,QAAMC,YAAYX,SAAST,SAAT;AAClB,QAAMqB,OAAQb,QAAQR,YAAYQ,QAAQR,SAASoB,SAAjB,KAAgCA;AAElEX,aAASa,GAAG,eAAeZ,WAA3B;AACA,QAAI,CAACF,QAAQX;AAAmBY,eAASa,GAAG,aAAaC,KAAzB;AAEhC,QAAIf,QAAQV,kBAAkB;AAC5BoB,iBAAWM,IAAIH,MAAM,cAAcX,WAAnC;AACA,UAAI,CAACF,QAAQX;AAAmBqB,mBAAWM,IAAIH,MAAM,cAAcE,KAAnC;IACjC;AAEDL,eAAWM,IAAIC,UAAU,oBAAoB,WAAA;AAC3C,UAAIA,SAASC,oBAAoB;AAAU,eAAOT,KAAI;AACtDM,YAAK;KAFP;AAIAL,eAAWM,IAAIG,QAAQ,YAAY,SAACC,OAA0B;AAC5D,UAAIA,MAAMC;AAAWZ,aAAI;KAD3B;AAIA,QAAIT,QAAQZ;AAAYkC,WAAI;EAC7B;AAED,WAASd,UAAO;AACdP,aAASsB,IAAI,eAAerB,WAA5B;AACA,QAAI,CAACF,QAAQX;AAAmBY,eAASsB,IAAI,aAAaR,KAA1B;AAChCN,SAAI;AACJN,YAAQ;EACT;AAED,WAASmB,KAAKE,cAAsB;AAClCf,SAAI;AACJ,QAAI,OAAOe,iBAAiB;AAAarC,aAAOqC;AAChDrB,YAAQgB,OAAOM,WAAWC,MAAM1B,QAAQd,KAAhC;EACT;AAED,WAASuB,OAAI;AACX,QAAI,CAACN;AAAO;AACZgB,WAAOQ,aAAaxB,KAApB;EACD;AAED,WAASY,QAAK;AACZ,QAAI,CAACZ;AAAO;AACZM,SAAI;AACJa,SAAI;EACL;AAED,WAASI,OAAI;AACH,QAAAE,QAAU3B,SAASU,eAAT,EAAA;AAClB,QAAMkB,OAAO7B,QAAQT,kBAAkBqC,MAAME,IAAN,MAAgBF,MAAMG;AAE7D,QAAIF;AAAM,aAAOrB,QAAO;AAExB,QAAIP,SAAS+B,cAAT,GAA0B;AAC5B/B,eAASgC,WAAW9C,IAApB;IACD,OAAM;AACLc,eAASiC,SAAS,GAAG/C,IAArB;IACD;AACDmC,SAAI;EACL;AAED,MAAMf,OAAqB;IACzB4B,MAAM;IACNnC,SAASL,eAAeG,MAAMD,aAAaH,WAAlC;IACTU;IACAI;IACAc;IACAb;IACAM;;AAEF,SAAOR;AACR;AAEDd,SAASM,gBAAiDqC;",
  "names": ["defaultOptions", "active", "breakpoints", "delay", "jump", "playOnInit", "stopOnInteraction", "stopOnMouseEnter", "stopOnLastSnap", "rootNode", "Autoplay", "userOptions", "optionsHandler", "EmblaCarousel", "optionsBase", "merge", "globalOptions", "options", "carousel", "interaction", "timer", "init", "embla", "atMedia", "self", "destroy", "stop", "eventStore", "internalEngine", "emblaRoot", "root", "on", "reset", "add", "document", "visibilityState", "window", "event", "persisted", "play", "off", "jumpOverride", "setTimeout", "next", "clearTimeout", "index", "kill", "get", "max", "canScrollNext", "scrollNext", "scrollTo", "name", "undefined"]
}
