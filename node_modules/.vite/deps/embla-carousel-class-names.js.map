{
  "version": 3,
  "sources": ["../../embla-carousel-class-names/src/components/Options.ts", "../../embla-carousel-class-names/src/components/utils.ts", "../../embla-carousel-class-names/src/components/index.ts"],
  "sourcesContent": ["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  selected: string\n  draggable: string\n  dragging: string\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  selected: 'is-selected',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging',\n}\n\nexport type ClassNamesOptionsType = Partial<OptionsType>\n", "export function removeClass(node: HTMLElement, className: string): void {\n  const cl = node.classList\n  if (className && cl.contains(className)) cl.remove(className)\n}\n\nexport function addClass(node: HTMLElement, className: string): void {\n  const cl = node.classList\n  if (className && !cl.contains(className)) cl.add(className)\n}\n", "import { defaultOptions, ClassNamesOptionsType, OptionsType } from './Options'\nimport { addClass, removeClass } from './utils'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport EmblaCarousel, {\n  EmblaCarouselType,\n  EmblaEventType,\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    classNames?: ClassNamesType\n  }\n}\n\nexport type ClassNamesType = CreatePluginType<{}, OptionsType>\n\nfunction ClassNames(userOptions?: ClassNamesOptionsType): ClassNamesType {\n  const optionsHandler = EmblaCarousel.optionsHandler()\n  const optionsBase = optionsHandler.merge(\n    defaultOptions,\n    ClassNames.globalOptions,\n  )\n  let options: ClassNamesType['options']\n  let carousel: EmblaCarouselType\n\n  let root: HTMLElement\n  let slides: HTMLElement[]\n  const selectedEvents: EmblaEventType[] = ['select', 'pointerUp']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n\n  function init(embla: EmblaCarouselType): void {\n    carousel = embla\n    options = optionsHandler.atMedia(self.options)\n    root = carousel.rootNode()\n    slides = carousel.slideNodes()\n    const isDraggable = carousel.internalEngine().options.draggable\n\n    if (isDraggable) {\n      addClass(root, options.draggable)\n    }\n    if (options.dragging) {\n      draggingEvents.forEach((evt) => carousel.on(evt, toggleDraggingClass))\n    }\n    if (options.selected) {\n      selectedEvents.forEach((evt) => carousel.on(evt, toggleSelectedClass))\n      toggleSelectedClass()\n    }\n  }\n\n  function destroy(): void {\n    removeClass(root, options.draggable)\n    draggingEvents.forEach((evt) => carousel.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => carousel.off(evt, toggleSelectedClass))\n    slides.forEach((slide) => removeClass(slide, options.selected))\n  }\n\n  function toggleDraggingClass(evt: EmblaEventType): void {\n    if (evt === 'pointerDown') addClass(root, options.dragging)\n    else removeClass(root, options.dragging)\n  }\n\n  function toggleSelectedClass(): void {\n    const inView = carousel.slidesInView(true)\n    const notInView = carousel.slidesNotInView(true)\n    notInView.forEach((index) => removeClass(slides[index], options.selected))\n    inView.forEach((index) => addClass(slides[index], options.selected))\n  }\n\n  const self: ClassNamesType = {\n    name: 'classNames',\n    options: optionsHandler.merge(optionsBase, userOptions),\n    init,\n    destroy,\n  }\n  return self\n}\n\nClassNames.globalOptions = <ClassNamesOptionsType | undefined>undefined\n\nexport default ClassNames\n"],
  "mappings": ";;;;;;AAQO,IAAMA,iBAA8B;EACzCC,QAAQ;EACRC,aAAa,CAAA;EACbC,UAAU;EACVC,WAAW;EACXC,UAAU;AAL+B;ACR3B,SAAAC,YAAYC,MAAmBC,WAAiB;AAC9D,MAAMC,KAAKF,KAAKG;AAChB,MAAIF,aAAaC,GAAGE,SAASH,SAAZ;AAAwBC,OAAGG,OAAOJ,SAAV;AAC1C;AAEe,SAAAK,SAASN,MAAmBC,WAAiB;AAC3D,MAAMC,KAAKF,KAAKG;AAChB,MAAIF,aAAa,CAACC,GAAGE,SAASH,SAAZ;AAAwBC,OAAGK,IAAIN,SAAP;AAC3C;ACQD,SAASO,WAAWC,aAAmC;AACrD,MAAMC,iBAAiBC,cAAcD,eAAd;AACvB,MAAME,cAAcF,eAAeG,MACjCpB,gBACAe,WAAWM,aAFO;AAIpB,MAAIC;AACJ,MAAIC;AAEJ,MAAIC;AACJ,MAAIC;AACJ,MAAMC,iBAAmC,CAAC,UAAU,WAAX;AACzC,MAAMC,iBAAmC,CAAC,eAAe,WAAhB;AAEzC,WAASC,KAAKC,OAAwB;AACpCN,eAAWM;AACXP,cAAUL,eAAea,QAAQC,KAAKT,OAA5B;AACVE,WAAOD,SAASS,SAAT;AACPP,aAASF,SAASU,WAAT;AACT,QAAMC,cAAcX,SAASY,eAAT,EAA0Bb,QAAQlB;AAEtD,QAAI8B,aAAa;AACfrB,eAASW,MAAMF,QAAQlB,SAAf;IACT;AACD,QAAIkB,QAAQjB,UAAU;AACpBsB,qBAAeS,QAAQ,SAACC,KAAG;AAAK,eAAAd,SAASe,GAAGD,KAAKE,mBAAjB;OAAhC;IACD;AACD,QAAIjB,QAAQnB,UAAU;AACpBuB,qBAAeU,QAAQ,SAACC,KAAG;AAAK,eAAAd,SAASe,GAAGD,KAAKG,mBAAjB;OAAhC;AACAA,0BAAmB;IACpB;EACF;AAED,WAASC,UAAO;AACdnC,gBAAYkB,MAAMF,QAAQlB,SAAf;AACXuB,mBAAeS,QAAQ,SAACC,KAAG;AAAK,aAAAd,SAASmB,IAAIL,KAAKE,mBAAlB;KAAhC;AACAb,mBAAeU,QAAQ,SAACC,KAAG;AAAK,aAAAd,SAASmB,IAAIL,KAAKG,mBAAlB;KAAhC;AACAf,WAAOW,QAAQ,SAACO,OAAK;AAAK,aAAArC,YAAYqC,OAAOrB,QAAQnB,QAAhB;KAArC;EACD;AAED,WAASoC,oBAAoBF,KAAmB;AAC9C,QAAIA,QAAQ;AAAexB,eAASW,MAAMF,QAAQjB,QAAf;;AAC9BC,kBAAYkB,MAAMF,QAAQjB,QAAf;EACjB;AAED,WAASmC,sBAAmB;AAC1B,QAAMI,SAASrB,SAASsB,aAAa,IAAtB;AACf,QAAMC,YAAYvB,SAASwB,gBAAgB,IAAzB;AAClBD,cAAUV,QAAQ,SAACY,OAAU;AAAA,aAAA1C,YAAYmB,OAAOuB,KAAD,GAAS1B,QAAQnB,QAAxB;KAAxC;AACAyC,WAAOR,QAAQ,SAACY,OAAU;AAAA,aAAAnC,SAASY,OAAOuB,KAAD,GAAS1B,QAAQnB,QAAxB;KAAlC;EACD;AAED,MAAM4B,OAAuB;IAC3BkB,MAAM;IACN3B,SAASL,eAAeG,MAAMD,aAAaH,WAAlC;IACTY;IACAa;;AAEF,SAAOV;AACR;AAEDhB,WAAWM,gBAAmD6B;",
  "names": ["defaultOptions", "active", "breakpoints", "selected", "draggable", "dragging", "removeClass", "node", "className", "cl", "classList", "contains", "remove", "addClass", "add", "ClassNames", "userOptions", "optionsHandler", "EmblaCarousel", "optionsBase", "merge", "globalOptions", "options", "carousel", "root", "slides", "selectedEvents", "draggingEvents", "init", "embla", "atMedia", "self", "rootNode", "slideNodes", "isDraggable", "internalEngine", "forEach", "evt", "on", "toggleDraggingClass", "toggleSelectedClass", "destroy", "off", "slide", "inView", "slidesInView", "notInView", "slidesNotInView", "index", "name", "undefined"]
}
